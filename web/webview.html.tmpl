<!DOCTYPE html>
<html>
  <head>
    <title>Hypsi {{.Version}}</title>
    <style id="style" type="text/css">
    body {
      background-color: #232634;
      color: #c6d0f5;
      overflow: hidden;
    }

    button {
      background-color: #292c3c;
      transform: scale(1.25);
      border-radius: 10px;
    }

    button:hover {
      background-color: #626880;
    }

    .gallery {
      width: 640px;
      height: 360px;
      margin: 3px;
      background-color: #303446;
      background-size: 640px 360px;
    }

    .monitors {
      display: flex;
      justify-content: space-evenly;
      align-items: center;
    }

    .monitors.flip {
      flex-flow: row-reverse;
    }

    .desc {
      text-align: center;
      background-color: #000;
    }

    .rewind {
      text-align: center;
      height: 150px;
      width: auto;
    }
    
    @media only screen and (max-width: 1281px) {
      .monitors {
	flex-flow: column;
      }
      .monitors.flip {
	flex-flow: column-reverse;
      }

    }
    input[type="radio"],
    input[type="checkbox"] {
      height: 3rem;
      accent-color: green;
      transform:scale(2);
    }
    </style>
  </head>
  <body>
    <div class="container">
    <h1>Monitors</h1>
    <hr />
      <div id="monitors" class="monitors">	
	{{ range .Monitors}}
	<div class="{{.Monitor}} gallery" ondrop="handleDrop(event)" ondragover="allowDrop(event)">
	  <div class="desc">
	   <svg viewBox="0 0 60 40" width="60" xmlns="http://www.w3.org/2000/svg">
	    <text x="20" y="30" font-size="18" fill="#fff" font-family="monospace">{{.Monitor}}</text>
	  </svg>
	  </div>
	  <form id="form_{{.Monitor}}" enctype="multipart/form-data" action="/upload" method="post" hidden>
	    <input id="imageFile" type="file" name="imageFile" />
	    <input type="text" name="monitor" value="{{.Monitor}}" />
	    <input id="send_{{.Monitor}}" type="submit" value="upload" />
	  </form>
	</div>
	<style id="style_{{.Monitor}}" >
	.{{.Monitor}} {
		background-image: url({{.Thumb64|safeURL}});
	};
	</style>
	{{end}}
      </div>
      <hr />

      <div id="rewind" class="rewind" hidden>
	{{ if .Rewind|plusOne|inHistory }}
	  <button id="roll_back" title="previous"><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m7 2 10 10-10 10" fill="none" stroke="#fff" stroke-width="3" transform="matrix(-1 0 0 1 24 0)"/></svg></button>
	{{ else }}
	  <button id="roll_back" title="previous" disabled><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m7 2 10 10-10 10" fill="none" stroke="#fff" stroke-width="3" transform="matrix(-1 0 0 1 24 0)"/></button>
	{{ end }}
	<span id="rewindtext">	  
	  <svg viewBox="0 0 60 30" width="60" xmlns="http://www.w3.org/2000/svg">
	  <text id="svgtext" x="20" y="30" font-size="32" fill="#fff" font-family="monospace">{{.Rewind}}</text>
	  </svg>
	</span>
	{{ if .Rewind|gtZero }}
	<button id="roll_forth" title="next"><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m7 2 10 10-10 10" fill="none" stroke="#fff" stroke-width="3"/></svg></button>
	{{ else }}
	<button id="roll_forth" title="next" disabled><svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="m7 2 10 10-10 10" fill="none" stroke="#fff" stroke-width="3"/></svg></button>
	{{ end }}
      </div>



    </div>
    <script type="text/javascript">


    </script>

    <script type="text/javascript">
      async function sendData(data, url) {
	try {
	  const response = await fetch(url, {
	    method: "POST",
	    body: data,
	  });
	  console.log(await response.statusText);
	  location.reload();
	} catch (e) {
	  console.error(e);
	}
      }

      function handleDrop(event) {
	event.preventDefault();

	if (event.dataTransfer.items) {
	  let filecount = 0;
	  const fileLimit = 1;
	  [...event.dataTransfer.items].forEach((item, i) => {
	    // If dropped items aren't files, reject them
	    if (item.kind === "file" && filecount < fileLimit) {
	      filecount++;
	      const file = item.getAsFile();
	      const firstClass = event.target.className.split(" ").shift();
	      const sendTo = "/upload?monitor=" + firstClass;
	      const formSelector = "#form_" + firstClass;
	      const formElement = document.querySelector(formSelector);

	      // Take over form submission
	      formElement.addEventListener(
		"submit",
		(event) => {
		  event.preventDefault();
		  // Associate the FormData object with the form element
		  const formData = new FormData(formElement);
		  formData.set("imageFile", file);
		  //localStorage.setItem("rewind", 0);
		  sendData(formData, sendTo);
		},
		false,
	      );

	      let sendBtnSelector = "#send_" + firstClass;
	      document.querySelector(sendBtnSelector).click();
	    }
	  });
	} else {
	  [...event.dataTransfer.files].forEach((file, i) => {
	    console.log("?", file, i);
	  });
	}
      }

      function allowDrop(event) {
	event.preventDefault();
      }

      function handleRewind(event, idx) {
	event.preventDefault();

	if (idx < 0) {
	  return;
	}

	const url = new URL(location);
	url.pathname = "/rewind";
	url.searchParams.set("t", String(idx));
	history.pushState({}, "", url);
	setTimeout(() => history.go(), 300);
      }


      function openFileChooser(monitor) {
	let selector = "#imageFile_" + monitor;
	document.querySelector(selector)?.click();
      }
      const countElement = () => document.querySelector("#svgtext");
      const rewindBtn = () => document.querySelector("#roll_back");
      const forwardBtn = () => document.querySelector("#roll_forth");
      function handleGoRewind(event, idx) {
	if (typeof event?.preventDefault != "function") {
	  console.error("don't call this function directly");
	  return
	}
	event.preventDefault();

	if (idx < 0) {
	  return;
	}

	if (typeof RollBack == "function") {

	  RollBack(idx).then((result) => {
	    switch (String(idx).length) {
		case 1:
		  countElement().setAttribute("x", "20");
		  break;
		case 2:
		  countElement().setAttribute("x", "10");
		  break;
		default:
		  countElement().setAttribute("x", "0");
		  break;
	    }

	    const limit = Number(result.limit);

	    result.monitors?.forEach(i => {
	      let styleElement = document.querySelector("#style_" + i.monitor);
	      styleElement.textContent = "." + i.monitor + " { background-image: url(" + i.image + "); }";
	    });
	    const textElement = document.querySelector("#svgtext");
	    const backbtn = document.querySelector("#roll_back")
	    const forthbtn = document.querySelector("#roll_forth");
	    
	    backbtn?.removeAttribute("disabled");
	    forthbtn?.removeAttribute("disabled");

	    if (idx >= 0) {
	      textElement.textContent = idx; 
	    }

	    let curr = Number(result.rewind || idx);
	    let next = curr - 1;
	    let prev = curr + 1;

	    if (prev >= limit) {
	      prev = limit - 1;
	    }

	    if (prev - next === 1) {
	      backbtn.setAttribute("disabled", true);
	    }

	    if (next < 0) {
	      forthbtn.setAttribute("disabled", true);
	    }

	  });
	} else {
	  console.error("missing RollBack() code");
	}
      }


      document.addEventListener("DOMContentLoaded", () => {

	  rewindBtn().addEventListener("click", (event) => {
	    const idx = Number(countElement().innerHTML);
	    handleGoRewind(event, idx + 1);
	  });

	  forwardBtn().addEventListener("click", (event) => {
	    const idx = Number(countElement().innerHTML);
	    handleGoRewind(event, idx - 1);
	  });

      });




     function toggleRewind() {
      rw = document.querySelector("#rewind");
      if (rw.getAttribute("hidden")) {
	rw.removeAttribute("hidden");
      } else {
	rw.setAttribute("hidden", true);
      }
    }


    document.addEventListener('keydown', function(event) {
      let selector;
      switch (event.key) {
      case "h":
	selector = "#roll_back";
	break;
      case "ArrowLeft":
	selector = "#roll_back";
	break;
      case "l":
	selector = "#roll_forth";
	break;
      case "ArrowRight":
	selector = "#roll_forth";
	break;
      case " ":
	toggleRewind();
	break;
      case "j":
      case "k":
      case "ArrowUp":
      case "ArrowDown":
	let monitors = document.querySelector("#monitors");
	if (monitors?.getAttribute("class").includes("flip")) {
	  monitors.setAttribute("class", "monitors");
	} else {
	  monitors.setAttribute("class", "monitors flip");
	}
	break;
      default:
	//console.log(event.key);
	break;
      }
      if (selector) {
	document.querySelector(selector).click();
      }
    });
    </script>
  </body>
</html>
